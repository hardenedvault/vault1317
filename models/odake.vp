// SPDX-FileCopyrightText: Â© 2021, HardenedVault Limited (https://hardenedvault.net)
// SPDX-License-Identifier: GPL-3.0-only

attacker[active]

principal Bob[
	knows public c0, c1, c2, c3, c4, c5, c6, c7
	knows private ib, id_b
	generates qb
	generates eb
	gqb = G^qb
	geb = G^eb
	d = SIGN(ib, gqb)
	gib = G^ib
]
Bob -> Alice: [gib], id_b, gqb, d, geb

principal Alice[
	knows public c0, c1, c2, c3, c4, c5, c6, c7
	knows private ia, id_a
	generates ea
	generates i
	gia = G^ia
	gea = G^ea
	_ = SIGNVERIF(gib, gqb, d)?
	sba = CONCAT(geb^ea, gqb^ea, gib^ea)
	ka0 = HKDF(c6, sba, nil)
	ka1 = HKDF(c7, ka0, nil)
	Ta = HKDF(c3, CONCAT(gia, gib), nil)
	MPa = CONCAT(c5, i, CONCAT(gia, gib), CONCAT(gea, geb), Ta)
	M = MAC(ka1, MPa)
	P = RINGSIGN(ia, gib, geb, MPa,)
	CE = ENC(ka0, CONCAT(gia, id_a, M, P))
]

// simplified double-ratchet model used in exemplar models for signal
principal Alice[
	generates m1, ea1
	gea1 = G^ea1
	r0a, k0a = HKDF(sba, nil, nil)
	r1a, k1a = HKDF(geb^ea1, r0a, nil)
	ek1a, ek2a = HKDF(MAC(k1a, nil), nil, nil)
	e1 = AEAD_ENC(ek1a, m1, HASH(gia, gib, gea1))
]
Alice -> Bob: gea, i, CE, gea1, e1

principal Bob[
	sab = CONCAT(gea^eb, gea^qb, gea^ib)
	kb0 = HKDF(c6, sab, nil)
	kb1 = HKDF(c7, kb0, nil)
	p_ia, sn_a, mh, rsig = SPLIT(DEC(kb0, CE))
	Tb = HKDF(c3, CONCAT(p_ia, gib), nil)
	MPb = CONCAT(c5, i, CONCAT(p_ia, gib), CONCAT(gea, geb), Tb)
	_ = ASSERT(mh, MAC(kb1, MPb))?
	_ = RINGSIGNVERIF(p_ia, gib, geb, MPb, rsig)?
]

// simplified double-ratchet model used in exemplar models for signal
principal Bob[
	r0b, k0b = HKDF(sab, nil, nil)
	r1b, k1b = HKDF(gea1^eb, r0b, nil)
	ek1b, ek2b = HKDF(MAC(k1b, nil), nil, nil)
	m1_d = AEAD_DEC(ek1b, e1, HASH(p_ia, gib, gea1))?
]

phase[1]

queries[
	confidentiality? m1
        authentication? Bob -> Alice: geb
	authentication? Alice -> Bob: gea
]
